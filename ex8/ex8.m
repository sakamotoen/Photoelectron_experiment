clc;
close all;
clear;

a = 1:1:207;
b = [3.10E-06
2.38E-06
2.48E-06
2.53E-06
2.58E-06
2.67E-06
2.57E-06
2.51E-06
2.35E-06
2.29E-06
2.29E-06
2.25E-06
2.29E-06
2.45E-06
2.53E-06
2.41E-06
2.75E-06
2.58E-06
2.69E-06
2.59E-06
2.73E-06
2.70E-06
2.85E-06
2.81E-06
2.75E-06
3.02E-06
2.79E-06
2.77E-06
2.83E-06
2.97E-06
2.87E-06
3.12E-06
2.88E-06
2.85E-06
2.99E-06
3.07E-06
3.21E-06
3.34E-06
3.33E-06
3.43E-06
3.43E-06
3.35E-06
3.72E-06
4.01E-06
4.02E-06
4.11E-06
4.08E-06
4.08E-06
4.16E-06
4.15E-06
4.31E-06
4.54E-06
4.79E-06
4.50E-06
4.88E-06
4.68E-06
4.86E-06
5.08E-06
5.13E-06
5.18E-06
5.32E-06
5.60E-06
5.84E-06
5.85E-06
6.08E-06
5.90E-06
6.21E-06
6.33E-06
6.28E-06
6.69E-06
7.15E-06
7.82E-06
8.71E-06
1.03E-05
1.25E-05
1.62E-05
2.14E-05
2.93E-05
4.03E-05
5.53E-05
7.58E-05
0.00010113
0.00013463
0.00018049
0.00024052
0.00032023
0.00041377
0.00052863
0.00067016
0.0008395
0.0010301
0.0012399
0.0014588
0.0016867
0.0019296
0.0020857
0.002235
0.0024684
0.0026934
0.0029132
0.0031151
0.0032926
0.0034419
0.0035631
0.0036724
0.0037654
0.003842
0.0039042
0.0039533
0.0039906
0.0040182
0.0040372
0.0040507
0.0040598
0.0040661
0.0040698
0.0040722
0.0040739
0.0040744
0.0040754
0.0040755
0.0040761
0.0040768
0.0040768
0.0040771
0.0040778
0.0040782
0.0040784
0.0040782
0.0040779
0.0040779
0.0040781
0.0040777
0.0040772
0.0040778
0.0040782
0.0040785
0.0040786
0.0040788
0.004079
0.0040794
0.0040795
0.0040794
0.004079
0.0040798
0.0040799
0.0040798
0.0040797
0.0040792
0.0040794
0.0040795
0.0040799
0.0040795
0.0040798
0.0040791
0.0040793
0.0040792
0.0040794
0.0040797
0.0040797
0.00408
0.0040801
0.0040805
0.0040812
0.004081
0.0040807
0.0040806
0.0040809
0.0040807
0.0040808
0.0040809
0.0040811
0.0040806
0.00408
0.0040805
0.0040807
0.0040807
0.0040806
0.0040805
0.0040812
0.0040813
0.0040812
0.0040819
0.0040822
0.0040822
0.0040822
0.0040823
0.004082
0.0040821
0.0040814
0.0040811
0.0040809
0.0040808
0.0040814
0.004081
0.004081
0.004081
0.0040813
0.004081
0.004081
0.0040812
0.004081
0.004081
0.0040817
0.0040814
0.0040817
0.0040816
];

h = input( '请输入多项式阶数：');                                           %用户输入设置阶数
N = h+1;
G = [,];                                                                   %创建空G矩阵
n = length(a);
for j = 1:N
    for i = 1:n
        G(i,j) = a(i).^(j-1);                                              %创建G矩阵
    end
end
G = [G,b];



w = zeros(1,n);
sigma = 0;                                                                 %设置中间变量


for k = 1:N    
    sigma = -sign(G(k,k))*sqrt(sum(G(k:n,k).^2));                          %计算sigma
    w(k) = G(k,k)-sigma;
    
    for j = k+1:n
        w(j) = G(j,k);
    end
    
    B = sigma * w(k);                                                      %beta
    
    % 变换G(k-1)到G(k)
    
    G(k,k) = sigma;
    
    for j = k+1:N+1
        
        t = sum(w(k:n) * G((k:n),j))/B;
        
        for i = k:n
            G(i,j) = G(i,j) + t*w(i);
        end
        
    end
    
end

%% 解三角方程
% c = 0;                                                                     
x(N) = G(N,N+1)/G(N,N);
for i = N-1:-1:1
%     for j = i+1:N
%         c = c +G(i,j).*x(j);
%     end
%     
%     x(i) = (G(i,N+1)-c)/G(i,i);
    x(i) = (G(i,N+1)-sum(G(i,i+1:N).*x(i+1:N)))/G(i,i);
end

%% polyfit 
p1 = polyfit(a,b,h);
L = length(x);  
y1 = 0;
y = 0;
for i = 1:L
    y = y+p1(i) * a.^(L-i);                                                 %列出最终多项式
end
for i = 1:L
    y1 = y1+x(L-i+1) * a.^(L-i);                                                 %列出最终多项式
end
dif = diff(y,1);
figure;
plot(dif);
figure;
plot(a,y1);
figure;
plot(a,y);